import { GET as getSurveyPage } from "@/app/api/survey/[surveyId]/page/[pageId]/route";
import { POST as submitResponse } from "@/app/api/survey/[surveyId]/page/[pageId]/response/route";
import { getServerSession } from "next-auth/next";

jest.mock("next-auth/next", () => ({
  getServerSession: jest.fn(),
}));

describe("GET /api/survey/[surveyId]/page/[pageId]", () => {
  it("should return 401 if user is not authenticated", async () => {
    const response = await getSurveyPage();
    expect(response.status).toBe(401);
  });

  it("should return the correct page data for an authenticated user", async () => {
    (getServerSession as jest.Mock).mockResolvedValue({ user: { email: "test@example.com" } });

    const request = new Request("http://localhost/api/survey/1/page/2", { method: "GET" });
    const response = await getSurveyPage(request, { params: { surveyId: "1", pageId: "2" } });

    expect(response.status).toBe(200);
    const json = await response.json();
    expect(json).toHaveProperty("questions");
    expect(Array.isArray(json.questions)).toBe(true);
  });
});

describe("POST /api/survey/[surveyId]/page/[pageId]/response", () => {
  it("should return 401 if user is not authenticated", async () => {
    const request = new Request("http://localhost/api/survey/1/page/2/response", {
      method: "POST",
      body: JSON.stringify({ responses: [] }),
    });
    const response = await submitResponse(request, { params: { surveyId: "1", pageId: "2" } });
    expect(response.status).toBe(401);
  });

  it("should accept valid responses for different question types", async () => {
    (getServerSession as jest.Mock).mockResolvedValue({ user: { email: "test@example.com" } });

    const request = new Request("http://localhost/api/survey/1/page/2/response", {
      method: "POST",
      body: JSON.stringify({
        responses: [
          { questionId: "q1", type: "dropdown", answer: "Option A" },
          { questionId: "q2", type: "multiselect", answer: ["Option 1", "Option 2"] },
          { questionId: "q3", type: "numeric", answer: 42 },
          { questionId: "q4", type: "short", answer: "Short response" },
          { questionId: "q5", type: "long", answer: "This is a long text response." },
          { questionId: "q6", type: "confirm", answer: true }
        ]
      }),
    });

    const response = await submitResponse(request, { params: { surveyId: "1", pageId: "2" } });
    expect(response.status).toBe(200);
  });
});
